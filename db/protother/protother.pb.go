// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protother.proto

package protother

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17452f9afc4e24c8, []int{0}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_17452f9afc4e24c8, []int{1}
}

func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReply.Unmarshal(m, b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
}
func (m *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(m, src)
}
func (m *PingReply) XXX_Size() int {
	return xxx_messageInfo_PingReply.Size(m)
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TaskRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17452f9afc4e24c8, []int{2}
}

func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskRequest.Unmarshal(m, b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
}
func (m *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(m, src)
}
func (m *TaskRequest) XXX_Size() int {
	return xxx_messageInfo_TaskRequest.Size(m)
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

func (m *TaskRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UTask struct {
	TaskMane             string   `protobuf:"bytes,1,opt,name=TaskMane,proto3" json:"TaskMane,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=Project,proto3" json:"Project,omitempty"`
	Date                 string   `protobuf:"bytes,3,opt,name=Date,proto3" json:"Date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UTask) Reset()         { *m = UTask{} }
func (m *UTask) String() string { return proto.CompactTextString(m) }
func (*UTask) ProtoMessage()    {}
func (*UTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_17452f9afc4e24c8, []int{3}
}

func (m *UTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UTask.Unmarshal(m, b)
}
func (m *UTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UTask.Marshal(b, m, deterministic)
}
func (m *UTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UTask.Merge(m, src)
}
func (m *UTask) XXX_Size() int {
	return xxx_messageInfo_UTask.Size(m)
}
func (m *UTask) XXX_DiscardUnknown() {
	xxx_messageInfo_UTask.DiscardUnknown(m)
}

var xxx_messageInfo_UTask proto.InternalMessageInfo

func (m *UTask) GetTaskMane() string {
	if m != nil {
		return m.TaskMane
	}
	return ""
}

func (m *UTask) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *UTask) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type DailyTaskCount struct {
	Date                 string   `protobuf:"bytes,1,opt,name=Date,proto3" json:"Date,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DailyTaskCount) Reset()         { *m = DailyTaskCount{} }
func (m *DailyTaskCount) String() string { return proto.CompactTextString(m) }
func (*DailyTaskCount) ProtoMessage()    {}
func (*DailyTaskCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_17452f9afc4e24c8, []int{4}
}

func (m *DailyTaskCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DailyTaskCount.Unmarshal(m, b)
}
func (m *DailyTaskCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DailyTaskCount.Marshal(b, m, deterministic)
}
func (m *DailyTaskCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailyTaskCount.Merge(m, src)
}
func (m *DailyTaskCount) XXX_Size() int {
	return xxx_messageInfo_DailyTaskCount.Size(m)
}
func (m *DailyTaskCount) XXX_DiscardUnknown() {
	xxx_messageInfo_DailyTaskCount.DiscardUnknown(m)
}

var xxx_messageInfo_DailyTaskCount proto.InternalMessageInfo

func (m *DailyTaskCount) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *DailyTaskCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ProjectTaskCount struct {
	Project              string   `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectTaskCount) Reset()         { *m = ProjectTaskCount{} }
func (m *ProjectTaskCount) String() string { return proto.CompactTextString(m) }
func (*ProjectTaskCount) ProtoMessage()    {}
func (*ProjectTaskCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_17452f9afc4e24c8, []int{5}
}

func (m *ProjectTaskCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectTaskCount.Unmarshal(m, b)
}
func (m *ProjectTaskCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectTaskCount.Marshal(b, m, deterministic)
}
func (m *ProjectTaskCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectTaskCount.Merge(m, src)
}
func (m *ProjectTaskCount) XXX_Size() int {
	return xxx_messageInfo_ProjectTaskCount.Size(m)
}
func (m *ProjectTaskCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectTaskCount.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectTaskCount proto.InternalMessageInfo

func (m *ProjectTaskCount) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ProjectTaskCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "protother.PingRequest")
	proto.RegisterType((*PingReply)(nil), "protother.PingReply")
	proto.RegisterType((*TaskRequest)(nil), "protother.TaskRequest")
	proto.RegisterType((*UTask)(nil), "protother.UTask")
	proto.RegisterType((*DailyTaskCount)(nil), "protother.DailyTaskCount")
	proto.RegisterType((*ProjectTaskCount)(nil), "protother.ProjectTaskCount")
}

func init() {
	proto.RegisterFile("protother.proto", fileDescriptor_17452f9afc4e24c8)
}

var fileDescriptor_17452f9afc4e24c8 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xc9, 0x48, 0x2d, 0xd2, 0x03, 0xb3, 0x84, 0x38, 0xe1, 0x02, 0x4a, 0xea, 0x5c, 0xdc,
	0x01, 0x99, 0x79, 0xe9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xbe,
	0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x92,
	0x2a, 0x17, 0x27, 0x44, 0x61, 0x41, 0x4e, 0x25, 0x1e, 0x65, 0xea, 0x5c, 0xdc, 0x21, 0x89, 0xc5,
	0xd9, 0x84, 0xcd, 0x0b, 0xe4, 0x62, 0x0d, 0x05, 0xa9, 0x14, 0x92, 0xe2, 0xe2, 0x00, 0xd1, 0xbe,
	0x89, 0x79, 0x30, 0x35, 0x70, 0x3e, 0x48, 0x7b, 0x40, 0x51, 0x7e, 0x56, 0x6a, 0x72, 0x89, 0x04,
	0x13, 0x44, 0x3b, 0x94, 0x2b, 0x24, 0xc4, 0xc5, 0xe2, 0x92, 0x58, 0x92, 0x2a, 0xc1, 0x0c, 0x16,
	0x06, 0xb3, 0x95, 0xac, 0xb8, 0xf8, 0x5c, 0x12, 0x33, 0x73, 0x2a, 0x41, 0xda, 0x9d, 0xf3, 0x4b,
	0xf3, 0x10, 0xaa, 0x18, 0x11, 0xaa, 0x84, 0x44, 0xb8, 0x58, 0xc1, 0x92, 0x60, 0x13, 0x59, 0x83,
	0x20, 0x1c, 0x25, 0x27, 0x2e, 0x01, 0xa8, 0xd1, 0x08, 0xdd, 0x48, 0xb6, 0x33, 0xa2, 0xda, 0x8e,
	0xd5, 0x0c, 0xa3, 0xa9, 0x4c, 0x5c, 0xac, 0x20, 0xdd, 0xc5, 0x42, 0x16, 0x5c, 0x1c, 0xee, 0xa9,
	0x25, 0x10, 0xb6, 0x98, 0x1e, 0x22, 0xf8, 0x91, 0x82, 0x46, 0x4a, 0x00, 0x49, 0x1c, 0x1c, 0x12,
	0x4a, 0x0c, 0x06, 0x8c, 0x42, 0x5e, 0x5c, 0x82, 0xee, 0xa9, 0x25, 0x68, 0xde, 0xc0, 0x65, 0x84,
	0x24, 0x92, 0x38, 0xaa, 0x16, 0xb0, 0x59, 0x7e, 0x5c, 0xc2, 0xee, 0xa9, 0x25, 0x18, 0xde, 0xc2,
	0x65, 0x9a, 0x34, 0x92, 0x38, 0xba, 0x26, 0xb0, 0x79, 0x66, 0x5c, 0x2c, 0xa0, 0x24, 0x80, 0x62,
	0x00, 0x52, 0xe2, 0x91, 0x12, 0xc1, 0x10, 0x2f, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0x0b,
	0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xb2, 0x63, 0xd7, 0x88, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TasksClient interface {
	GetTasks(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (Tasks_GetTasksClient, error)
	GetDailyTaskCount(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (Tasks_GetDailyTaskCountClient, error)
	GetProjectTaskCount(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (Tasks_GetProjectTaskCountClient, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type tasksClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksClient(cc grpc.ClientConnInterface) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) GetTasks(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (Tasks_GetTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tasks_serviceDesc.Streams[0], "/protother.Tasks/GetTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &tasksGetTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tasks_GetTasksClient interface {
	Recv() (*UTask, error)
	grpc.ClientStream
}

type tasksGetTasksClient struct {
	grpc.ClientStream
}

func (x *tasksGetTasksClient) Recv() (*UTask, error) {
	m := new(UTask)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tasksClient) GetDailyTaskCount(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (Tasks_GetDailyTaskCountClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tasks_serviceDesc.Streams[1], "/protother.Tasks/GetDailyTaskCount", opts...)
	if err != nil {
		return nil, err
	}
	x := &tasksGetDailyTaskCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tasks_GetDailyTaskCountClient interface {
	Recv() (*DailyTaskCount, error)
	grpc.ClientStream
}

type tasksGetDailyTaskCountClient struct {
	grpc.ClientStream
}

func (x *tasksGetDailyTaskCountClient) Recv() (*DailyTaskCount, error) {
	m := new(DailyTaskCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tasksClient) GetProjectTaskCount(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (Tasks_GetProjectTaskCountClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tasks_serviceDesc.Streams[2], "/protother.Tasks/GetProjectTaskCount", opts...)
	if err != nil {
		return nil, err
	}
	x := &tasksGetProjectTaskCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tasks_GetProjectTaskCountClient interface {
	Recv() (*ProjectTaskCount, error)
	grpc.ClientStream
}

type tasksGetProjectTaskCountClient struct {
	grpc.ClientStream
}

func (x *tasksGetProjectTaskCountClient) Recv() (*ProjectTaskCount, error) {
	m := new(ProjectTaskCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tasksClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/protother.Tasks/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
type TasksServer interface {
	GetTasks(*TaskRequest, Tasks_GetTasksServer) error
	GetDailyTaskCount(*TaskRequest, Tasks_GetDailyTaskCountServer) error
	GetProjectTaskCount(*TaskRequest, Tasks_GetProjectTaskCountServer) error
	Ping(context.Context, *PingRequest) (*PingReply, error)
}

// UnimplementedTasksServer can be embedded to have forward compatible implementations.
type UnimplementedTasksServer struct {
}

func (*UnimplementedTasksServer) GetTasks(req *TaskRequest, srv Tasks_GetTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (*UnimplementedTasksServer) GetDailyTaskCount(req *TaskRequest, srv Tasks_GetDailyTaskCountServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDailyTaskCount not implemented")
}
func (*UnimplementedTasksServer) GetProjectTaskCount(req *TaskRequest, srv Tasks_GetProjectTaskCountServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectTaskCount not implemented")
}
func (*UnimplementedTasksServer) Ping(ctx context.Context, req *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_GetTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TasksServer).GetTasks(m, &tasksGetTasksServer{stream})
}

type Tasks_GetTasksServer interface {
	Send(*UTask) error
	grpc.ServerStream
}

type tasksGetTasksServer struct {
	grpc.ServerStream
}

func (x *tasksGetTasksServer) Send(m *UTask) error {
	return x.ServerStream.SendMsg(m)
}

func _Tasks_GetDailyTaskCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TasksServer).GetDailyTaskCount(m, &tasksGetDailyTaskCountServer{stream})
}

type Tasks_GetDailyTaskCountServer interface {
	Send(*DailyTaskCount) error
	grpc.ServerStream
}

type tasksGetDailyTaskCountServer struct {
	grpc.ServerStream
}

func (x *tasksGetDailyTaskCountServer) Send(m *DailyTaskCount) error {
	return x.ServerStream.SendMsg(m)
}

func _Tasks_GetProjectTaskCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TasksServer).GetProjectTaskCount(m, &tasksGetProjectTaskCountServer{stream})
}

type Tasks_GetProjectTaskCountServer interface {
	Send(*ProjectTaskCount) error
	grpc.ServerStream
}

type tasksGetProjectTaskCountServer struct {
	grpc.ServerStream
}

func (x *tasksGetProjectTaskCountServer) Send(m *ProjectTaskCount) error {
	return x.ServerStream.SendMsg(m)
}

func _Tasks_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protother.Tasks/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protother.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Tasks_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTasks",
			Handler:       _Tasks_GetTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDailyTaskCount",
			Handler:       _Tasks_GetDailyTaskCount_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProjectTaskCount",
			Handler:       _Tasks_GetProjectTaskCount_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protother.proto",
}
