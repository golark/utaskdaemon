# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import protother_pb2 as protother__pb2


class TasksStub(object):
    """plots
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTasks = channel.unary_stream(
                '/protother.Tasks/GetTasks',
                request_serializer=protother__pb2.TaskRequest.SerializeToString,
                response_deserializer=protother__pb2.UTask.FromString,
                )
        self.GetDailyTaskCount = channel.unary_stream(
                '/protother.Tasks/GetDailyTaskCount',
                request_serializer=protother__pb2.TaskRequest.SerializeToString,
                response_deserializer=protother__pb2.DailyTaskCount.FromString,
                )
        self.GetProjectTaskCount = channel.unary_stream(
                '/protother.Tasks/GetProjectTaskCount',
                request_serializer=protother__pb2.TaskRequest.SerializeToString,
                response_deserializer=protother__pb2.ProjectTaskCount.FromString,
                )
        self.GetPlot = channel.unary_stream(
                '/protother.Tasks/GetPlot',
                request_serializer=protother__pb2.PlotRequest.SerializeToString,
                response_deserializer=protother__pb2.PointReply.FromString,
                )
        self.Ping = channel.unary_unary(
                '/protother.Tasks/Ping',
                request_serializer=protother__pb2.PingRequest.SerializeToString,
                response_deserializer=protother__pb2.PingReply.FromString,
                )


class TasksServicer(object):
    """plots
    """

    def GetTasks(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDailyTaskCount(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProjectTaskCount(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlot(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TasksServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTasks': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTasks,
                    request_deserializer=protother__pb2.TaskRequest.FromString,
                    response_serializer=protother__pb2.UTask.SerializeToString,
            ),
            'GetDailyTaskCount': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDailyTaskCount,
                    request_deserializer=protother__pb2.TaskRequest.FromString,
                    response_serializer=protother__pb2.DailyTaskCount.SerializeToString,
            ),
            'GetProjectTaskCount': grpc.unary_stream_rpc_method_handler(
                    servicer.GetProjectTaskCount,
                    request_deserializer=protother__pb2.TaskRequest.FromString,
                    response_serializer=protother__pb2.ProjectTaskCount.SerializeToString,
            ),
            'GetPlot': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPlot,
                    request_deserializer=protother__pb2.PlotRequest.FromString,
                    response_serializer=protother__pb2.PointReply.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=protother__pb2.PingRequest.FromString,
                    response_serializer=protother__pb2.PingReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protother.Tasks', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tasks(object):
    """plots
    """

    @staticmethod
    def GetTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protother.Tasks/GetTasks',
            protother__pb2.TaskRequest.SerializeToString,
            protother__pb2.UTask.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDailyTaskCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protother.Tasks/GetDailyTaskCount',
            protother__pb2.TaskRequest.SerializeToString,
            protother__pb2.DailyTaskCount.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProjectTaskCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protother.Tasks/GetProjectTaskCount',
            protother__pb2.TaskRequest.SerializeToString,
            protother__pb2.ProjectTaskCount.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protother.Tasks/GetPlot',
            protother__pb2.PlotRequest.SerializeToString,
            protother__pb2.PointReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protother.Tasks/Ping',
            protother__pb2.PingRequest.SerializeToString,
            protother__pb2.PingReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
